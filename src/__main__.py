import sys
from openai import OpenAI
from openai.types.beta.threads.message_create_params import (
    Attachment,
    AttachmentToolFileSearch,
)
from textwrap import wrap

from keyreader import KeyReader

def client_setup(keys):
    """sets up openai api for use

    Args:
        keys (str): path to keys
    """
    
    # read the openai api key
    kr = KeyReader(keys)
    return OpenAI(api_key=kr.get("openai-api-key"))

def paper_setup(client, paper):
    """sets up a pdf file for usage with openai api

    Args:
        client (openai.OpenAI): the client to setup with
        paper (str): path to pdf file of paper
    """
    
    return client.files.create(file=open(paper, "rb"), purpose="assistants")

def assistant_setup(client):
    """sets up openai assistant

    Args:
        client (openai.OpenAI): the client to setup with
    """
    
    return client.beta.assistants.create(
        model="gpt-4o-mini",
        description="An assistant to extract the contents of research papers",
        tools=[{"type": "file_search"}],
        name="literature search assistant",
    )

def main(paper, outfolder):
    
    # basic setup
    client = client_setup("/Users/kirti/Documents/papercuts/src/keys.yaml")
    paper = paper_setup(client, paper)
    assistant = assistant_setup(client)
    
    # create the prompt
    prompt = """
        Summarize the research paper in ~2000 words as if you were the first author. You should adhere to the requirements mentioned below.
        
        This summary should be accessible to people that work in that field with relevant knowledge, though any specific terms should be further summarized. 
        Ensure that the summary is ~2000 words. 
        The summary should be given as one long paragraph.
        I've provided the research paper as a pdf file.
        Do not state anything other than the paper summary.
    """
    
    # Create assistant
    thread = client.beta.threads.create()
    client.beta.threads.messages.create(
        thread_id=thread.id,
        role="user",
        attachments=[
            Attachment(
                file_id=paper.id, tools=[AttachmentToolFileSearch(type="file_search")]
            )
        ],
        content=prompt,
    )
    
    # run thread
    print("Summarizing the paper")
    run = client.beta.threads.runs.create_and_poll(
        thread_id=thread.id, assistant_id=assistant.id, timeout=1000
    )
    
    if run.status != "completed":
        raise Exception("Run failed:", run.last_error)

    messages_cursor = client.beta.threads.messages.list(thread_id=thread.id)
    messages = [message for message in messages_cursor]

    # Output text
    res_txt = messages[0].content[0].text.value + " This research paper summary was generated by AI."
    
    # convert to mp3 file
    print("converting to listen-able file")
    strings = wrap(res_txt, 4096)
    responses = []
    speech_file_path = f"{outfolder}/speech.mp3"
    for s in strings:
        responses.append(client.audio.speech.create(
            model="tts-1",
            voice="fable",
            input=s,
            speed=1
        ))
    print(responses[0])
    responses[0].write_to_file(speech_file_path)

if __name__ == "__main__":
    file = sys.argv[1]
    outfolder = sys.argv[2]
    main(file, outfolder)